import React,{useState, useEffect} from 'react';
import DayCard from "../weatherComponents/dayCard/dayCard";
import axios from "axios";
import {API_ENDPOINT} from "../../config/config";
import "./home.css";
import Moment from "moment";
import locationimg from "../../images/my-location.png";

function Home() {

    const [weatherData,setweatherData]=useState([]);//data to be displayed
    const [location,setLocation]=useState("london");
    const [dataset,setData]=useState(false);//to toggle loader
    const [system,setSystem]=useState("metric");//defines which system is being  displayed
    const [city,setCitylist]=useState([]);//array to prompt cities based on user input

    const getData = () =>{
        axios.get(`${API_ENDPOINT}/api/location/search/?query=${location}`).then(res=>{
            let id=res.data[0].woeid;
            axios.get(`${API_ENDPOINT}/api/location/${id}`).then(res=>{
                setweatherData(res.data.consolidated_weather);
                setData(true);//To stop the loader when data is set
            })
        })
    }

    //To populate the cities based on what is being typed in the inputbox
    const getCity = (e) =>{
        axios.get(`${API_ENDPOINT}/api/location/search/?query=${e.target.value}`).then(res=>{
            setCitylist(res.data);
        })
    }

    useEffect(()=>{
        getData();
    },[location, system])

    //Use location generated by browser to find nearest city
    const useMylocation = () => {
        navigator.permissions.query({ name: 'geolocation' }) //query to check if permission has been granted by user
            .then(res=>{if(res.state === "denied"){
                alert("Please provide permission to access your location") //prompt to change permission manually
            }
            else{
                navigator.geolocation.getCurrentPosition((loc) => {
                    const lat=loc.coords.latitude;
                    const long=loc.coords.longitude;
                    const local=lat+","+long;
                    //getting nearest city based on co-ordinates from browser
                    axios.get(`${API_ENDPOINT}/api/location/search/?lattlong=${local}`).then(res=>{
                        setLocation(res.data[0].title);
                        setData(false);
                    })
                  })
            }
        });
    }
    
    return (
        <div className="wrapper">

            <center><h2>Welcome, Find out how the weather is today!</h2></center>

            {/* When Data has been populated */}
            {dataset === true ? (
                <>
                <div>

                    {/* ---------> User input region begins <-------- */}

                        <center>
                            <input id="search" type="text" name="city" list="cityname" onChange={getCity}/>
                            <datalist id="cityname">
                                {Object.keys(city).map((p)=>(
                                    <option key={p} id={city[p].woeid} value={city[p].title}/>
                                ))}
                            </datalist>

                            {/* to find user location and weather on that basis of that */}
                            <img src={locationimg} id="my-location" alt="Use my location" onClick={useMylocation}/>
                            <br/>
                            <button 
                                id="getweather" 
                                title="Find Weather" 
                                //using selection from datalist to find city. Location change triggers re-render.
                                onClick={()=>{setLocation(document.getElementById("cityname").options[0].value);setData(false)}}
                            >
                                Get Weather
                            </button>
                            <br/>

                            {/* Conditionally showing button to view imperical or metric values */}
                            {system === "imperial" ? (
                                <button id="system-btn" onClick={()=>{setSystem("metric");setData(false)}}>Metric System</button>
                            ) : (
                                <button id="system-btn" onClick={()=>{setSystem("imperial");setData(false)}}>Imperial System</button>
                            )}
                        </center>

                    {/* ---------> User input region ends <-------- */}

                </div>


                    

                <div className="today_weather_wrapper">

                    {/* ---------> Display area for today's weather in selected city begins <--------- */}
                    

                        <div className="today_description">
                            <p id="location_head">{location[0].charAt(0).toUpperCase() + location.slice(1)}</p>
                            <p id="location_desc">{Moment(weatherData[0].applicable_date).format("dddd, MMMM Do")}<br/>
                            {weatherData[0].weather_state_name}</p>
                            <span id="image_temp">
                                <img
                                height="100px" width="100px"
                                src={`https://www.metaweather.com/static/img/weather/png/64/${weatherData[0].weather_state_abbr}.png`} 
                                alt="Weather Icon"
                                />
                                {system === "metric" ? (
                                    <p id="temp_text"><strong>{Math.round(Number(weatherData[0].the_temp)*100)/100}</strong>&#x2103;</p>
                                ) : (
                                    <p id="temp_text"><strong>{Math.round(((Number(weatherData[0].the_temp)*9/5)+32)*100)/100}</strong>&#x2109;</p> 
                                )}
                            </span>
                        </div>

                    {/* ---------> Display area for todays weather in selected city ends <--------- */}

                    
                    {/* ---------> Display area for todays weather details in selected city begins <--------- */}

                        <div className="today_details">
                                <p>Precipitation: {weatherData[0].predictability}%</p>
                                <p>Humidity: {weatherData[0].humidity}%</p>
                                {system === "metric" ? (
                                    <>
                                    <p>Wind: {Math.round(Number(weatherData[0].wind_speed)*100)/100} kmph {weatherData[0].wind_direction_compass}</p>
                                    <p>Air Pressure: {weatherData[0].air_pressure} Pascal</p>
                                    </>
                                ) : (
                                    <>
                                    <p>Wind: {Math.round(Number(weatherData[0].wind_speed)/1.609*100)/100} mph {weatherData[0].wind_direction_compass}</p>
                                    <p>Air Pressure: {Math.round(Number(weatherData[0].air_pressure)/101325*1000)/1000} atm</p>
                                    </>
                                )}
                                
                        </div>

                    {/* ---------> Display area for todays weather details in selected city ends <--------- */} 

                </div>

                    {/* ---------> Display area for cards holding values of the upcoming days' weather begins <-------- */}

                        <div className="cards">
                            {Object.keys(weatherData).map((i)=>(
                                <div key={i}>
                                <DayCard 
                                    date={weatherData[i].applicable_date}
                                    icon={weatherData[i].weather_state_abbr}
                                    maxtemp={weatherData[i].max_temp}
                                    mintemp={weatherData[i].min_temp}
                                    humid={weatherData[i].humidity}
                                    system={system}
                                />
                                </div>
                            ))}
                        </div> 
                    {/* ---------> Display area for cards holding values of the upcoming days' weather ends <-------- */}
                </> 
            ) : (
                <center><span className="loader"/></center> //Toggled when data is loading 
            )} 
             
        </div>
    )
}

export default Home
